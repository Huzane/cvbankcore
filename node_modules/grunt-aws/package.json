{
  "name": "grunt-aws",
  "description": "A Grunt interface into the Amazon Node.JS SDK",
  "version": "0.0.4",
  "homepage": "https://github.com/jpillora/grunt-aws",
  "author": {
    "name": "Jaime Pillora",
    "email": "dev@jpillora.com",
    "url": "http://www.jpillora.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jpillora/grunt-aws"
  },
  "bugs": {
    "url": "https://github.com/jpillora/grunt-aws/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jpillora/grunt-aws/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test",
    "start": "./node_modules/coffee-script/bin/coffee -c -w -b -o ./tasks src"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.0",
    "coffee-script": "~1.6.2"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "dependencies": {
    "require-dir": "~0.1.0",
    "lodash": "~1.0.1",
    "async": "~0.2.6",
    "mime": "~1.2.9",
    "glob-manifest": "0.0.2",
    "aws-sdk": "~0.9.8-pre.9"
  },
  "readme": "# grunt-aws\n\n> A Grunt interface into the Amazon Web Services Node.JS SDK\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-aws --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-aws');\n```\n\n## The \"aws\" task\n\n### Quick Usage\n\n```js\ngrunt.initConfig({\n  aws: {\n    options: {\n      config:{\n        accessKeyId: '...',\n        secretAccessKey: '...'\n      },\n      s3: {\n        options: {\n          root: 'build/'\n          bucket: '...'\n          access: 'public-read'\n        }\n      }\n    },\n    deploy: {\n      service: 's3'\n      put: ['build/**/*.*']\n    }\n  }\n});\n```\n\n### Options\n\n#### options.config\nType: `Object`\nDefault: `{}`\n\n#### options.config.accessKeyId (required)\nType: `String`\n\nAmazon access key id\n\n#### options.config.secretAccessKey (required)\nType: `String`\n\nAmazon secret access key\n\n#### options.s3\nType: `Object`\nDefault: `{}`\n\nS3 specifc options\n\n#### options.s3.root\nType: `String`\nDefault: `'./'`\n\nLocal directory to use as S3 root\n\n#### options.s3.bucket (required)\nType: `String`\n\nName of S3 bucket\n\n#### options.s3.access\nType: `String`\nDefault: `'public-read'`\n\n\n### Target API\n\n#### `target`.put\nType: `Array` | `String`\nDefault: `[]`\n\nA single glob or an array of globs\n\n\n#### `target`.del\nType: `Array` | `String`\nDefault: `[]`\n\nA single glob or an array of globs\n\n### Target specifc Options\n\nEach target may override the options specified. The following example is equivalent to the \"Quick Usage\" example above.\n\n\n```js\ngrunt.initConfig({\n  aws: {\n    options: {\n      config:{\n        accessKeyId: '...',\n        secretAccessKey: '...'\n      },\n      s3: {\n        //nothing here\n      }\n    },\n    deploy: {\n      service: 's3',\n      // these options will override 'service' options (so s3 options in this case)\n      options: {\n        root: 'build/'\n        bucket: '...'\n        access: 'public-read'\n      }\n      put: ['build/**/*.*']\n    }\n  }\n});\n```\n\n",
  "readmeFilename": "README.md",
  "_id": "grunt-aws@0.0.4",
  "dist": {
    "shasum": "25cb0b2eea1fbffce54357a0b16ae2c83ef4ef38"
  },
  "_from": "grunt-aws@0.0.4",
  "_resolved": "https://registry.npmjs.org/grunt-aws/-/grunt-aws-0.0.4.tgz"
}
