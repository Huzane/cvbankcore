{"ts":1378673933137,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1378674357304,"patch":[[{"diffs":[[1,"/**\n@module Router\n**/\n\n/**\n * represents all functions on the admin dashboard and routes - more than just this, but conceptually a start\n * @class Admin\n * */\n \nvar ErrorChecker = {\n    \n    check: function(success, data) {\n        \n        if (success === false)\n            return this.formatErrorForReturn(data);\n        else\n            return data;\n        \n    },\n    formatErrorForReturn: function (data)\n    {\n        var ErrorLogger = require('../lib/errorLogger/dip-error');\n        var dipError = new ErrorLogger(data);\n        return dipError.toJSON();\n    }\n     \n};\n \n // private function to format errors so we can return them cleanly\n\nvar Company = {\n\n    companyModel: require(\"../models/company\"),\n    getCompanies: function (callback) {\n        \n        var newCompany = new this.companyModel();\n        return newCompany.list(callback);        \n        \n    },\n    addNewCompany: function (data, callback) {\n        \n        var newCompany = new this.companyModel();\n        return newCompany.add(data, callback);\n        \n    }\n    \n};\n\n\nvar Admin = {\n    \n    adminModel: require(\"../models/admin\"),\n    getSystemActivity: function (callback) {\n        \n        var newAdminModel = new this.adminModel();\n        return newAdminModel.systemActivity(callback);        \n        \n    },\n    Financials : {\n        \n        getSummary: function (callback) {\n            \n            var newAdminModel = new this.adminModel();\n            return newAdminModel.getFinancialDataSummary(callback);        \n            \n        }\n        \n    }\n    \n};\n\n\n/**\nTakes expressjs app and uses it to determine which controller to call to handle\n\n@method route\n@param {App} app The express application object.\n**/\nfunction route(app) {\n\n    // authentication\n    var authentication = require('../lib/authentication/authentication');\n \n    // get financial data\n    app.get('/admin/financials/summary', authentication.authenticate, function (req, res, next) {});\n \n    // get financial data - top delinquents\n    app.get('/admin/financials/delinquents', authentication.authenticate, function (req, res, next) {});\n\n    // get financial data - best historical purchasers\n    app.get('/admin/financials/top-firms', authentication.authenticate, function (req, res, next) {});\n\n    // get financial data - credit swings (firms who use up credit then don't then resume - yo yo patterns)\n    app.get('/admin/financials/credit-swings', authentication.authenticate, function (req, res, next) {});\n\n    // get financial data - who has not been using credit - hoarders\n    app.get('/admin/financials/hoarders', authentication.authenticate, function (req, res, next) {});\n\n}\n\nmodule.exports.route = route;\n"]],"start1":0,"start2":0,"length1":0,"length2":2701}]],"length":2701,"saved":false}
{"ts":1378674398557,"patch":[[{"diffs":[[0,";\n \n"],[-1," // private function to format errors so we can return them cleanly\n\nvar Company = {\n\n    companyModel: require(\"../models/company\"),\n    getCompanies: function (callback) {\n        \n        var newCompany = new this.companyModel();\n        return newCompany.list(callback);        \n        \n    },\n    addNewCompany: function (data, callback) {\n        \n        var newCompany = new this.companyModel();\n        return newCompany.add(data, callback);\n        \n    }\n    \n};\n\n\nvar Admin = {\n    \n    adminModel: require(\"../models/admin\"),\n    getSystemActivity: function (callback) {\n        \n        var newAdminModel = new this.adminModel();\n        return newAdminModel.systemActivity(callback);        \n        \n    },\n    Financials : {\n        \n        getSummary: function (callback) {\n            \n            var newAdminModel = new this.adminModel();\n            return newAdminModel.getFinancialDataSummary(callback);        \n            \n        }\n        \n    }\n    \n};"],[1,"\n\n\n"],[0,"\n\n\n/"]],"start1":579,"start2":579,"length1":991,"length2":11}]],"length":1721,"saved":false}
{"ts":1378674418883,"patch":[[{"diffs":[[0,"/\n \n"],[-1,"var ErrorChecker = {\n    \n    check: function(success, data) {\n        \n        if (success === false)\n            return this.formatErrorForReturn(data);\n        else\n            return data;\n        \n    },\n    formatErrorForReturn: function (data)\n    {\n        var ErrorLogger = require('../lib/errorLogger/dip-error');\n        var dipError = new ErrorLogger(data);\n        return dipError.toJSON();\n    }\n     \n};\n \n\n\n\n\n"],[0,"\n\n/*"]],"start1":158,"start2":158,"length1":433,"length2":8}]],"length":1296,"saved":false}
